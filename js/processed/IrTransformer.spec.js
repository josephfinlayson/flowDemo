// Generated by CoffeeScript 1.6.2
/*
 Helper functions (event mocking, etc...)
*/


(function() {
  var clickOn, doNothing, eventFire;

  eventFire = function(el, etype) {
    var evObj;

    if (el.fireEvent != null) {
      return el.fireEvent('on' + etype);
    } else {
      evObj = document.createEvent('Events');
      evObj.initEvent(etype, true, false);
      return el.dispatchEvent(evObj);
    }
  };

  clickOn = function(el) {
    return eventFire(el, "click");
  };

  doNothing = function() {
    return null;
  };

  /*
   Tests
  */


  describe("Sanity tests", function() {
    return it("true is true", function() {
      return expect(true).toBe(true);
    });
  });

  describe("High level processed tests", function() {
    return it("Processed module is defined", function() {
      return expect(Processed).toBeDefined();
    });
  });

  describe("IR transformer", function() {
    it("Exists", function() {
      return expect(Processed.NodeToHtml).toBeDefined();
    });
    it("Transforms input to an HTMLElement", function() {
      return expect(Processed.NodeToHtml(null, null, null, doNothing)).toEqual(jasmine.any(HTMLElement));
    });
    describe("For any type of nodes", function() {
      var elem, node;

      node = {
        type: "foo",
        title: "TEST TITLE",
        text: "TEST TEXT"
      };
      elem = Processed.NodeToHtml(node, null, null, doNothing);
      it("Will render the node title in the '.stage-title' element", function() {
        return expect($(elem).find(".stage-title").text()).toEqual("TEST TITLE");
      });
      return it("Will render the node text in the '.stage-text' element", function() {
        return expect($(elem).find(".stage-text").text()).toEqual("TEST TEXT");
      });
    });
    describe("For inform nodes", function() {
      var callbacks, node;

      node = {
        type: "inform",
        title: "TEST TITLE",
        text: "TEST TEXT",
        target: "TEST_TARGET"
      };
      callbacks = null;
      beforeEach(function() {
        callbacks = {
          simple: function(target) {
            return null;
          }
        };
        return spyOn(callbacks, "simple");
      });
      return it("Clicking in the '.target' element will call the callback with the target name", function() {
        var elem;

        elem = Processed.NodeToHtml(node, null, null, callbacks.simple);
        clickOn($(elem).find(".target")[0]);
        return expect(callbacks.simple).toHaveBeenCalledWith("TEST_TARGET");
      });
    });
    return describe("For choice nodes", function() {
      var node;

      node = {
        type: "choice",
        title: "TEST_TITLE",
        text: "TEST_TEXT",
        choices: [
          {
            text: "A",
            target: "TARGET_A",
            'class': "CLASS_A"
          }, {
            text: "B",
            target: "TARGET_B",
            'class': "CLASS_B"
          }, {
            text: "C",
            target: "TARGET_C",
            'class': "CLASS_C"
          }
        ]
      };
      it("Will create three links when provided with three choices", function() {
        var elem;

        elem = Processed.NodeToHtml(node, null, null, doNothing);
        return expect($(elem).find(".target").length).toBe(3);
      });
      it("Will not mix up targets for multiple nodes", function() {
        var a_target, callbacks, elem, target_text;

        callbacks = {
          simple: function(target) {
            return null;
          }
        };
        spyOn(callbacks, "simple");
        elem = Processed.NodeToHtml(node, null, null, callbacks.simple);
        a_target = $(elem).find(".target")[1];
        target_text = $(a_target).text();
        clickOn(a_target);
        return expect(callbacks.simple).toHaveBeenCalledWith("TARGET_" + target_text);
      });
      return it("Will apply a class to targets if it is provided", function() {
        var a_target, elem, target_text;

        elem = Processed.NodeToHtml(node, null, null, doNothing);
        a_target = $(elem).find(".target")[1];
        target_text = $(a_target).text();
        return expect($(a_target).hasClass("CLASS_" + target_text)).toBeTruthy();
      });
    });
  });

}).call(this);
